// Layout Config
// =============


// Variables
// Reusable CSS Grid Template Columns definition
// ---------------------------------------------
$grid-columns-small: [col1-start] minmax(5vw, 1fr) [col1-end col2-start] minmax(auto, 1fr) [col2-end col3-start] minmax(auto, 1fr) [col3-end col4-start] minmax(auto, 1fr) [col4-end col5-start] minmax(auto, 1fr) [col5-end];
$grid-columns-large: [col1-start] 1fr [col1-end col2-start] 1fr [col2-end col3-start] minmax(0, size('full-content')) [col3-end col4-start] 1fr [col4-end col5-start] 1fr [col5-end];


// Breakpoints
// -----------
/// Breakpoint values, adjusted to the proper units
/// @group config-layout
$breakpoints: (
  'medium-page': size('medium-page') ('convert-units': 'browser-ems'),
  'full-content': size('full-content') ('convert-units': 'browser-ems'),
  'small-page': size('small-page') ('convert-units': 'browser-ems'),
  'large-page': size('large-page') ('convert-units': 'browser-ems'),
  'nav-medium': size('nav-medium') ('convert-units': 'browser-ems'),
  'nav-small': size('nav-small') ('convert-units': 'browser-ems'),
  'nav-wide': size('nav-wide') ('convert-units': 'browser-ems'),
);


// Center it (horizontally)
// ------------------------
/// Shortcut for left and right margin set to auto with optional max-width
/// @group config-layout
/// @parameter $max-width -
///   Optional max-width for centered item
/// @example scss
///   .foo {
///     @include center;
///   }
///
///   .bar {
///     @include center('full-content');
///   }
@mixin center(
  $max-width: null
) {
  margin-left: auto;
  margin-right: auto;

  @if ($max-width) {
    max-width: size($max-width);
    width: 100%;
  }
}


// Grid Container
// --------------
/// Shortcut for declaring shared grid container styles
/// @group config-layout
/// @example scss
///   .foo {
///     @include grid;
///   }
@mixin grid {
  @supports (display: grid) {
    display: grid;
    grid-template-columns: $grid-columns-small;

    @include above('medium-page') {
      grid-template-columns: $grid-columns-large;
    }
  }
}


// Get Extend Calc
// ===============
/// Returns a CSS-ready `calc()` function
/// based on the given viewport width,
/// minus 100%, divided by negative 2 â€“
/// for use extending elements outside their container.
/// In most cases, use `extend()` or `extend-side()`
/// to apply properties.
/// @access private
/// @see extend
/// @see extend-side
/// @parameter {Size} -
///   Target viewport-width for the extension.
///   For consistency, options include
///   `'extend-small'`, `'extend-large'` or `'extend-full'`.
/// @return {String} -
///   CSS-ready `calc()` function
///   for extending elements outside their containers.
@function get-extend-calc(
  $size
) {
  // Process size, when needed
  $size: if(type-of($size) != 'number', size($size), $size);

  // viewport width, divided by negative 2, plus 50%
  @return calc(#{$size / -2} + 50%);
}


// Extend Element
// ==============
/// Directly apply width and negative margins
/// for extending an element outside it's container
/// to a target viewport width.
/// For smarter media-queried extending,
/// use the `extend()` mixin.
/// @group config-layout
/// @see extend
/// @parameter {Size} -
///   Target viewport-width for the element.
///   For consistency, options include
///   `'extend-small'`, `'extend-large'` or `'extend-full'`.
/// @example scss
///   .foo {
///     @include extend('extend-small');
///   }
@mixin extend-element(
  $size
) {
  // Process size, when needed
  $size: if(type-of($size) != 'number', size($size), $size);
  $margins: get-extend-calc($size);

  // output
  margin-left: $margins;
  margin-right: $margins;
  max-width: $size;
  width: $size;
}


// Extend
// ======
/// Extend an element outside its container on both sides,
/// based on a target viewport width.
/// @group config-layout
/// @link http://codepen.io/mirisuzanne/pen/ded4ae1f55f9b24b2aa0ea4aaac71e47?editors=0100
///    Miriam's Sample CodePen
/// @link http://www.sassmeister.com/gist/96e88c4ecba8716397bd8c6c19887fb0 -
///    Sample Sassmeister SCSS/CSS with Accoutrement
/// @parameter {Size} $extend-base-size -
///   Target viewport-width for the element.
///   For consistency, options include
///   `'extend-small'`, `'extend-large'` or `'extend-full'`.
/// @example scss
///   .foo {
///     @include extend('extend-small');
///   }
///   .bar {
///     @include extend('extend-large');
///   }
///   .baz {
///     @include extend('extend-full');
///   }
@mixin extend(
  $extend-base-size
) {
  $extend-base-size: size($extend-base-size);

  @if ($extend-base-size == size('extend-full')) {
    @include extend-element($extend-base-size);
  } @else {
    @include above('medium-page') {
      @include extend-element($extend-base-size);
    }

    @include above('large-page') {
      @include extend-element($extend-base-size - 10vw);
    }
  }
}


// Extend Side
// ===========
/// Extend an element outside its container on one side only.
/// @group config-layout
/// @link http://codepen.io/mirisuzanne/pen/ded4ae1f55f9b24b2aa0ea4aaac71e47?editors=0100
///    Miriam's Sample CodePen
/// @link http://www.sassmeister.com/gist/96e88c4ecba8716397bd8c6c19887fb0 -
///    Sample Sassmeister SCSS/CSS with Accoutrement
/// @parameter {Side | String} $side - Choose right or left
/// @example scss
///   .foo {
///     @include extend-side(left);
///   }
///   .bar {
///     @include extend-side(right);
///   }
@mixin extend-side(
  $side
) {
  margin-bottom: size('pad');

  @include above('small-page') {
    float: unquote($side);

    @if ($side == 'left') {
      margin-right: size('pad');
    } @elseif ($side == 'right') {
      margin-left: size('pad');
    } @else {
      @error 'Choose left or right silly. How many sides do you have?';
    }
  }

  @include above('medium-page') {
    margin-#{$side}: get-extend-calc('extend-small');
  }

  @include above('large-page') {
    margin-#{$side}: get-extend-calc('extend-xsmall');
  }
}
